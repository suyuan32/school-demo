// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/suyuan32/simple-admin-school/ent/student"
	"github.com/suyuan32/simple-admin-school/ent/teacher"
)

const errInvalidPage = "INVALID_PAGE"

const (
	listField     = "list"
	pageNumField  = "pageNum"
	pageSizeField = "pageSize"
)

type PageDetails struct {
	Page  uint64 `json:"page"`
	Size  uint64 `json:"size"`
	Total uint64 `json:"total"`
}

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

const errInvalidPagination = "INVALID_PAGINATION"

type StudentPager struct {
	Order  student.OrderOption
	Filter func(*StudentQuery) (*StudentQuery, error)
}

// StudentPaginateOption enables pagination customization.
type StudentPaginateOption func(*StudentPager)

// DefaultStudentOrder is the default ordering of Student.
var DefaultStudentOrder = Desc(student.FieldID)

func newStudentPager(opts []StudentPaginateOption) (*StudentPager, error) {
	pager := &StudentPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultStudentOrder
	}
	return pager, nil
}

func (p *StudentPager) ApplyFilter(query *StudentQuery) (*StudentQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// StudentPageList is Student PageList result.
type StudentPageList struct {
	List        []*Student   `json:"list"`
	PageDetails *PageDetails `json:"pageDetails"`
}

func (s *StudentQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...StudentPaginateOption,
) (*StudentPageList, error) {

	pager, err := newStudentPager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.ApplyFilter(s); err != nil {
		return nil, err
	}

	ret := &StudentPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := s.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		s = s.Order(pager.Order)
	} else {
		s = s.Order(DefaultStudentOrder)
	}

	s = s.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type TeacherPager struct {
	Order  teacher.OrderOption
	Filter func(*TeacherQuery) (*TeacherQuery, error)
}

// TeacherPaginateOption enables pagination customization.
type TeacherPaginateOption func(*TeacherPager)

// DefaultTeacherOrder is the default ordering of Teacher.
var DefaultTeacherOrder = Desc(teacher.FieldID)

func newTeacherPager(opts []TeacherPaginateOption) (*TeacherPager, error) {
	pager := &TeacherPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultTeacherOrder
	}
	return pager, nil
}

func (p *TeacherPager) ApplyFilter(query *TeacherQuery) (*TeacherQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// TeacherPageList is Teacher PageList result.
type TeacherPageList struct {
	List        []*Teacher   `json:"list"`
	PageDetails *PageDetails `json:"pageDetails"`
}

func (t *TeacherQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...TeacherPaginateOption,
) (*TeacherPageList, error) {

	pager, err := newTeacherPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.ApplyFilter(t); err != nil {
		return nil, err
	}

	ret := &TeacherPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := t.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		t = t.Order(pager.Order)
	} else {
		t = t.Order(DefaultTeacherOrder)
	}

	t = t.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}
